using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using System.Text;
using UnityEditor;
using System.Reflection;
using System;
using GalaFramework;
using UnityEngine.UI;
using System.CodeDom;
using Microsoft.CSharp;
using System.CodeDom.Compiler;
using MVCCreator;
using MethodInfo = MVCCreator.MethodInfo;
using System.Text.RegularExpressions;

[Serializable]
public enum ViewType
{
    View,
    PopupView,
    SimpleView,
}

public class MVCCodeCreator
{
    const string ModuleCodePath = "Assets/Scripts/Hotfix/Module/";
    const string MainModuleCodePath = "Assets/Scripts/Main/Module/";
    const string ViewCodePath = "/View";
    const string ControllCodePath = "/Controller";
    const string ModelCodePath = "/ViewModel";
    const string ViewModel = "/ViewModel";
    const string NameSpace = "Platform";
    const string HotfixSpace = "PlatformHotfix";

    static string MVCName;
    string CurrentModule;
    string CurrentMvvm;
    bool isHotfix;
    MVCInfo TemoInfo;
    static string ObjPath;
    static Dictionary<UnityEngine.Object, string> keyValuePairs;

    const string mvcComment = "Generated by the MvcCreate tool,ViewComponent will be regenerated.";

    public void CreateCode(MVCInfo Info, string _MVCName, Dictionary<UnityEngine.Object, string> _keyValuePairs, string _ObjPath, bool isHotfix)
    {
        this.isHotfix = isHotfix;
        CurrentModule = Info.ModuleName;
        CurrentMvvm = Info.MvcName;
        TemoInfo = Info;
        TemoInfo.Obj = null;
        keyValuePairs = _keyValuePairs;
        MVCName = _MVCName;
        ObjPath = _ObjPath;
        Create();
    }

    void Create()
    {
        string ModulePath = (isHotfix ? ModuleCodePath : MainModuleCodePath) + CurrentModule;
        string ScriptPath = string.Format("{0}/{1}{2}.cs", ModulePath, CurrentModule, "Module");
        // if (TemoInfo.View && TemoInfo.View && TemoInfo.PopupView && EditorUtility.DisplayDialog("Mvvm", "只能创建一个类型的View","是"))
        // {
        //     return;
        // }
        /*if (TemoInfo.View && TemoInfo.Controll && !File.Exists(ScriptPath) && EditorUtility.DisplayDialog("Mvvm", "是否需要创建Module脚本", "是"))
        {
            IsNullPath(ModulePath);
            CreateModuleCodeByDom(ModulePath);
        }*/

        ModulePath += "/" + CurrentMvvm;
        IsNullPath(ModulePath);
        string ViewPath = ModulePath + ViewCodePath;
        string ControllerPath = ModulePath + ControllCodePath;
        //string ModelPath = ModulePath + ModelCodePath;
        if (TemoInfo.Controll)
        {
            IsNullPath(ControllerPath);
            CreateControllerCodeByDom(ControllerPath);
        }
        if (TemoInfo.View)
        {
            IsNullPath(ViewPath);
            CreateViewCode(ViewPath,TemoInfo.viewType);
        }
        
        AssetDatabase.Refresh();
    }

    public static string GetScriptPath(string ModuleName, string ScriptName, int flag, string mvvmName, bool isHotfix = false)
    {
        string ModulePath = (isHotfix ? ModuleCodePath : MainModuleCodePath) + ModuleName;
        string EndPath;
        if (flag == 0)
        {
            EndPath = $"/{mvvmName}{ViewCodePath}";
        }
        else if (flag == 1)
        {
            EndPath = $"/{mvvmName}{ControllCodePath}";
        }
        else if (flag == 2)
        {
            return ModulePath + $"/{mvvmName}{ModelCodePath}";
        }
        else if (flag == 4)
        {
            return ModulePath;
        }
        else
        {
            return $"{ModulePath}/{mvvmName}";
        }
        string scriptPath = string.Format("{0}/{1}.cs", ModulePath + EndPath, ScriptName);
        return scriptPath;
    }

    void IsNullPath(string Path)
    {
        if (!Directory.Exists(Path))
        {
            Directory.CreateDirectory(Path);
        }
    }

    void CreateModelCodeByDom(string _Path)
    {
        string ScriptPath = string.Format("{0}/{1}{2}.cs", _Path, MVCName, "Model");
        if (!File.Exists(ScriptPath))
        {
            CreateCodeHelper createCodeHelper = new CreateCodeHelper();
            createCodeHelper.SetNameSpace(isHotfix ? HotfixSpace : NameSpace);

            createCodeHelper.AddUsing("UnityEngine");
            createCodeHelper.AddUsing("Assets.Scripts.Framework.GalaSports.Core");

            createCodeHelper.SetClassName(MVCName + "Model");
            createCodeHelper.AddClassCommentStatement(mvcComment);

            createCodeHelper.AddBaseType("Model");
            createCodeHelper.AddAttribute(new AttributeInfo() { Type = "ModuleAttribute", value = CurrentModule });
            createCodeHelper.AddAttribute(new AttributeInfo() { Type = "MvcAttribute", value = MVCName });

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Init", MethodAtt = MemberAttributes.Override | MemberAttributes.Public });
            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Show", MethodAtt = MemberAttributes.Override | MemberAttributes.Public });

            List<VariableInfo> variableInfos = new List<VariableInfo>();
            variableInfos.Add(new VariableInfo() { Name = "message", Type = "Message" });

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "OnMessage", MethodAtt = MemberAttributes.Override | MemberAttributes.Public, Parameters = variableInfos });
            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Destroy", MethodAtt = MemberAttributes.Override | MemberAttributes.Public });

            createCodeHelper.Create(ScriptPath);
            Debug.Log("Success Create Model Code");
        }
    }

    void CreateControllerCodeByDom(string _Path)
    {
        string ScriptPath = string.Format("{0}/{1}{2}.cs", _Path, MVCName, "Controller");
        if (!File.Exists(ScriptPath))
        {
            CreateCodeHelper createCodeHelper = new CreateCodeHelper();

            createCodeHelper.SetNameSpace(isHotfix ? HotfixSpace : NameSpace);
            createCodeHelper.AddUsing("UnityEngine");
            createCodeHelper.AddUsing("Platform");
            createCodeHelper.AddAttribute(new AttributeInfo() { Type = "ModuleAttribute", value = CurrentModule });
            createCodeHelper.AddAttribute(new AttributeInfo() { Type = "MvcAttribute", value = MVCName });

            createCodeHelper.AddBaseType("Controller");
            createCodeHelper.SetClassName(MVCName + "Controller");
            createCodeHelper.AddClassCommentStatement(mvcComment);

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Init", MethodAtt = MemberAttributes.Public | MemberAttributes.Override });
            // createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Show", MethodAtt = MemberAttributes.Public | MemberAttributes.Override});
            // createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Hide", MethodAtt = MemberAttributes.Public | MemberAttributes.Override });
            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "OnDestroy", MethodAtt = MemberAttributes.Public | MemberAttributes.Override });

            createCodeHelper.Create(ScriptPath);
            Debug.Log("Success Create Controller Code");
        }
    }

    public static void CreateViewModelByDom(string path, string vmName, Type type, bool IsHotFix = true)
    {
        string scriptName = $"{vmName}ViewModel";

        string nameSpace = IsHotFix ? HotfixSpace : NameSpace;

        string ScriptPath = string.Format("{0}/{1}{2}.cs", path, vmName, "ViewModel");

        var hasType = Assembly.Load(nameSpace).GetType($"{nameSpace}.{scriptName}");
        if (hasType != null)
        {
            if (EditorUtility.DisplayDialog($"已经存在", $"是否强制生成{scriptName}?", "是"))
            {
            }
            else
            {
                return;
            }
        }
        //if (!File.Exists(ScriptPath))
        {
            List<Type> needCreateViewModel = new List<Type>();
            CreateCodeHelper createCodeHelper = new CreateCodeHelper();

            createCodeHelper.SetNameSpace(nameSpace);
            createCodeHelper.AddUsing("System.Collections.Generic");
            createCodeHelper.AddUsing("Assets.MVVM");
            createCodeHelper.AddUsing("System");
            createCodeHelper.AddUsing("Com.Proto");

            createCodeHelper.AddBaseType("ViewModel");
            createCodeHelper.SetClassName(scriptName);
            createCodeHelper.AddClassCommentStatement(mvcComment);

            List<MVCCreator.PropertyInfo> flagVariable = new List<MVCCreator.PropertyInfo>();
            var allProperty = type.GetProperties();
            for (int i = 0; i < allProperty.Length; i++)
            {
                var property = allProperty[i];
                if (property.Name.Contains("Parser") || property.Name.Contains("Descriptor"))
                    continue;

                bool isList = typeof(IList).IsAssignableFrom(allProperty[i].PropertyType);
                bool isDict = typeof(IDictionary).IsAssignableFrom(allProperty[i].PropertyType);
                VariableInfo variableInfo = null;
                string typeName;
                if (isList)
                {
                    Type[] genericArgTypes = property.PropertyType.GetGenericArguments();
                    typeName = genericArgTypes[0].Name;
                    if (!genericArgTypes[0].IsPrimitive && property.PropertyType != typeof(string) && property.PropertyType != typeof(String))
                    {
                        typeName += "ViewModel";
                        needCreateViewModel.Add(genericArgTypes[0]);
                    }
                    variableInfo = new VariableInfo() { Name = $"{property.Name.ToLower()}_", MethodAtt = MemberAttributes.Private, Type = $"ModelCollection<{typeName}>" };
                }
                else if (isDict)
                {
                    Type[] genericArgTypes = property.PropertyType.GetGenericArguments();
                    string key = "";
                    string value = "";
                    for (int generIndex = 0; generIndex < 2; generIndex++)
                    {
                        if (generIndex == 0)
                        {
                            key = genericArgTypes[generIndex].Name;
                        }
                        else
                            value = genericArgTypes[generIndex].Name;

                        if (!genericArgTypes[generIndex].IsPrimitive && property.PropertyType != typeof(string) && property.PropertyType != typeof(String))
                        {
                            if (generIndex == 0)
                                key += "ViewModel";
                            else
                                value += "ViewModel";
                            needCreateViewModel.Add(genericArgTypes[generIndex]);
                        }
                    }
                    variableInfo = new VariableInfo() { Name = $"{property.Name.ToLower()}_", MethodAtt = MemberAttributes.Private, Type = $"MapCollection<{key},{value}>" };
                }
                else
                {
                    typeName = property.PropertyType.Name;
                    if (!property.PropertyType.IsPrimitive && property.PropertyType != typeof(string) && property.PropertyType != typeof(String) && !property.PropertyType.IsEnum)
                    {
                        typeName += "ViewModel";
                        needCreateViewModel.Add(property.PropertyType);
                        variableInfo = new VariableInfo() { Name = $"{property.Name.ToLower()}_", MethodAtt = MemberAttributes.Private, Type = typeName };
                    }
                    else
                        variableInfo = new VariableInfo() { Name = $"{property.Name.ToLower()}_", MethodAtt = MemberAttributes.Private, Type = $"PropertyValue<{typeName}>" };
                }
                createCodeHelper.AddVariable(variableInfo);
                var propertyInfo = new MVCCreator.PropertyInfo() { Name = property.Name, GetStatements = variableInfo, SetStatements = variableInfo, Type = variableInfo.Type, MethodAtt = MemberAttributes.Public | MemberAttributes.Final };
                flagVariable.Add(propertyInfo);
                createCodeHelper.AddProperty(propertyInfo);
            }

            List<string> bindStatements = new List<string>();
            for (int i = 0; i < flagVariable.Count; i++)
            {
                var variable = flagVariable[i];
                if (!variable.Type.Contains("PropertyValue") && !variable.Type.StartsWith("ModelCollection") && !variable.Type.StartsWith("MapCollection") && variable.Type.Contains("ViewModel"))
                {
                    bindStatements.Add($"\t\t\tthis.AddBinding({variable.Name} ?? ({variable.Name} = new {variable.Type}()));");
                }
                else
                    bindStatements.Add($"\t\t\t{variable.Name} = new {variable.Type}(this,\"{variable.Name}\");");

            }

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Bind", MethodAtt = MemberAttributes.Public | MemberAttributes.Override, MethodStatements = bindStatements });

            List<string> fillStatements = new List<string>();
            for (int i = 0; i < flagVariable.Count; i++)
            {
                var variable = flagVariable[i];
                if (variable.Type.StartsWith("ModelCollection") || variable.Type.StartsWith("MapCollection"))
                {
                    fillStatements.Add($"\t\t\tlist.Add(new ViewModelPropertyInfo({variable.Name},isCollectionProperty:true));");
                }
                else
                {
                    fillStatements.Add($"\t\t\tlist.Add(new ViewModelPropertyInfo({variable.Name}));");
                }
            }

            List<VariableInfo> variableInfos = new List<VariableInfo>();
            variableInfos.Add(new VariableInfo() { Name = "list", Type = "List<ViewModelPropertyInfo>" });

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "FillProperties", MethodAtt = MemberAttributes.Family | MemberAttributes.Override, Parameters = variableInfos, MethodStatements = fillStatements });

            List<VariableInfo> commandvariableInfos = new List<VariableInfo>();
            commandvariableInfos.Add(new VariableInfo() { Name = "list", Type = "List<ViewModelCommandInfo>" });
            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "FillCommands", MethodAtt = MemberAttributes.Family | MemberAttributes.Override, Parameters = commandvariableInfos });

            List<string> MerageFormStatements = new List<string>();
            MerageFormStatements.Add("\t\t\tif(other == null) return null;");
            for (int i = 0; i < flagVariable.Count; i++)
            {
                var variable = flagVariable[i];

                if (variable.Type.Contains("ViewModel"))
                {
                    if (variable.Type.StartsWith("ModelCollection"))
                    {
                        MerageFormStatements.Add($"\t\t\t{variable.Name}.Clear();");
                        MerageFormStatements.Add($"\t\t\tfor(int i = 0;i < other.{variable.Name}.Count; i++){{");
                        MerageFormStatements.Add($"\t\t\t{variable.Name}.Add(new {MidStr(variable.Type, "<", ">")}().MergeFrom(other.{variable.Name}[i])); }}");
                    }
                    else if (variable.Type.StartsWith("MapCollection"))
                    {
                        //MerageFormStatements.Add($"\t\t\t{variable.Name}.Clear();");
                        //MerageFormStatements.Add($"\t\t\tfor(int i = 0;i < other.{variable.Name}.Count; i++){{");
                        //MerageFormStatements.Add($"\t\t\t{variable.Name}.Add(new {MidStr(variable.Type, "<", ">")}().MergeFrom(other.{variable.Name}[i])); }}");
                    }
                    else
                        MerageFormStatements.Add($"\t\t\t{variable.Name}.MergeFrom(other.{variable.Name});");
                }
                else
                {
                    if (variable.Type.StartsWith("ModelCollection") || variable.Type.StartsWith("MapCollection"))
                    {
                        MerageFormStatements.Add($"\t\t\t{variable.Name}.ReplaceRange(other.{variable.Name});");
                    }
                    else
                        MerageFormStatements.Add($"\t\t\t{variable.Name}.Value = other.{variable.Name};");
                }
            }
            MerageFormStatements.Add("\t\t\t return this;");
            variableInfos = new List<VariableInfo>();
            variableInfos.Add(new VariableInfo() { Name = "other", Type = $"{type.Name}" });

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "MergeFrom", MethodAtt = MemberAttributes.Public | MemberAttributes.Final, Parameters = variableInfos, MethodStatements = MerageFormStatements, ReturnType = scriptName });

            createCodeHelper.BlankLinesBetweenMembers = false;
            createCodeHelper.Create(ScriptPath);
            Debug.Log("Success Create ViewModel Code");

            if (needCreateViewModel.Count > 0)
            {
                for (int i = 0; i < needCreateViewModel.Count; i++)
                {
                    CreateViewModelByDom(path, needCreateViewModel[i].Name, needCreateViewModel[i]);
                }
            }
        }

    }
    static string MidStr(string sourse, string startstr, string endstr)
    {
        Regex rg = new Regex("(?<=(" + startstr + "))[.\\s\\S]*?(?=(" + endstr + "))", RegexOptions.Multiline | RegexOptions.Singleline);
        return rg.Match(sourse).Value;
    }

    void CreateViewCode(string Path,ViewType viewType = ViewType.View)
    {
        string Parent = viewType.ToString();
        string ScriptPath = string.Format("{0}/{1}{2}.cs", Path, MVCName, "View");

        if (!File.Exists(ScriptPath))
        {
            CreateCodeHelper createCodeHelper = new CreateCodeHelper();
            createCodeHelper.SetNameSpace(isHotfix ? HotfixSpace : NameSpace);
            createCodeHelper.AddUsing("UnityEngine");
            createCodeHelper.AddUsing("BUI");
            createCodeHelper.AddAttribute(new AttributeInfo() { Type = "ModuleAttribute", value = CurrentModule });
            createCodeHelper.AddAttribute(new AttributeInfo() { Type = "MvcAttribute", value = MVCName });
            createCodeHelper.SetClassName($"{MVCName}View");
            createCodeHelper.AddClassCommentStatement(mvcComment);
            createCodeHelper.AddBaseType(Parent);
            createCodeHelper.SetPartial(true);
            //添加参数
            List<VariableInfo> variableInfos = new List<VariableInfo>();
            variableInfos.Add(new VariableInfo() { Name = "data", Type = "System.object"});
            //添加内容
            List<string> methodStatements = new List<string>();
            methodStatements.Add("\t\t\tbase.Init(data);");
            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "Init", MethodAtt = MemberAttributes.Family | MemberAttributes.Override ,Parameters =  variableInfos,MethodStatements = methodStatements});
            createCodeHelper.Create(ScriptPath);
        }
        CreateViewComponentCodeByDom(Path);
        // CreateViewComponentCode(Path);
    }

    void CreateViewComponentCodeByDom(string _Path)
    {
        string ScriptPath = string.Format("{0}/{1}{2}.cs", _Path, MVCName, "ViewComponent");

        CreateCodeHelper createCodeHelper = new CreateCodeHelper();
        createCodeHelper.SetNameSpace(isHotfix ? HotfixSpace : NameSpace);
        string tempValue = ObjPath;
        int loadResIndex = tempValue.IndexOf("LoadResources");
        if (loadResIndex != -1)
        {
            tempValue = tempValue.Substring(loadResIndex + 14, ObjPath.Length - loadResIndex - 15);
        }
        else
        {
            int resIndex = tempValue.IndexOf("Resources");
            if (resIndex != -1)
            {
                tempValue = tempValue.Substring(resIndex + 10, ObjPath.Length - resIndex - 11);
            }
        }
        tempValue = tempValue.Split('.')[0];

        createCodeHelper.SetClassName(MVCName + "View");
        createCodeHelper.SetPartial(true);

        createCodeHelper.AddAttribute(new AttributeInfo() { Type = "SourceAttribute", value = tempValue });

        VariableInfo variableInfo = new VariableInfo() { Type = "ComponentItemKey", Name = "_componentItemKey" };
        createCodeHelper.AddVariable(variableInfo);

        List<string> componentGetStatement = new List<string>();
        componentGetStatement.Add($"\t\t\tif(_componentItemKey == null) _componentItemKey = transform.GetComponent<ComponentItemKey>(); return _componentItemKey;");
        createCodeHelper.AddProperty(new MVCCreator.PropertyInfo() { Type = "ComponentItemKey", Name = "componentItemKey", MethodAtt = MemberAttributes.Family | MemberAttributes.Final, GetStatementsStr = componentGetStatement });


        List<string> methodStatements = new List<string>();


        foreach (var item in keyValuePairs)
        {
            var splitComponents = item.Value.Split('#');
            foreach (var componentsName in splitComponents)
            {
                string Name = componentsName.Replace(" ", "");
                string[] Array = Name.Split('.');
                Name = Array[Array.Length - 1];
                var variableName = $"{Name}_{item.Key.name}";
                createCodeHelper.AddVariable(new VariableInfo() { Name = $"_{variableName}", Type = componentsName.ToString(), MethodAtt = MemberAttributes.Private });

                List<string> getStatementsStr = new List<string>();
                getStatementsStr.Add($"\t\t\t\tif(_{variableName} == null)  _{variableName} = componentItemKey.GetObject<{componentsName}>(\"{variableName}\"); return _{variableName};");

                methodStatements.Add($"\t\t\t_{variableName} = null;");

                createCodeHelper.AddProperty(new MVCCreator.PropertyInfo()
                {
                    Type = componentsName,
                    Name = variableName,
                    GetStatementsStr = getStatementsStr,
                    MethodAtt = MemberAttributes.Family | MemberAttributes.Final
                });
            }
        }

        methodStatements.Add("\t\t\t_componentItemKey = null;");
        methodStatements.Add("\t\t\tbase.ReleaseComponent();");
        createCodeHelper.AddMethodInofs(new MethodInfo() { MethodAtt = MemberAttributes.Override | MemberAttributes.Family, MethodStatements = methodStatements, MethodName = "ReleaseComponent" });

        createCodeHelper.Create(ScriptPath);
        Debug.Log("Success Create ViewComponent Code");

        Serialization(ObjPath);
    }

    static void Serialization(string path)
    {
        GameObject obj = AssetDatabase.LoadAssetAtPath<GameObject>(path);

        var VClass = obj.GetComponent<ComponentItemKey>() ?? obj.AddComponent<ComponentItemKey>();
        using (var SObj = new SerializedObject(VClass))
        {
            ChildMark[] childList = obj.GetComponentsInChildren<ChildMark>(true);
            var componentData = SObj.FindProperty("componentDatas");
            componentData.ClearArray();

            if (childList == null || childList.Length == 0)
                return;

            foreach (var item in childList)
            {
                var splitComponents = item.ChildType.Split('#');
                foreach (var componentName in splitComponents)
                {
                    string Name = componentName.Replace(" ", "");
                    string[] Array = Name.Split('.');
                    Name = Array[Array.Length - 1];
                    string PropertyName = string.Format("{0}_{1}", Name, item.gameObject.name);
                    var value = item.gameObject;
                    var com = value.GetComponents<Component>();
                    var currentComponent = value.GetComponent(componentName);
                    if (currentComponent == null)
                    {
                        for (int i = 0; i < com.Length; i++)
                        {
                            if (com[i].GetType().FullName.Equals(componentName))
                            {
                                currentComponent = com[i];
                            }
                        }
                    }
                    componentData.InsertArrayElementAtIndex(componentData.arraySize);
                    var currentData = componentData.GetArrayElementAtIndex(componentData.arraySize - 1);
                    currentData.FindPropertyRelative("Key").stringValue = PropertyName;
                    currentData.FindPropertyRelative("Value").objectReferenceValue = componentName.Equals("UnityEngine.Transform") ? item.transform : currentComponent;
                    currentData.FindPropertyRelative("Type").stringValue = componentName;
                }
                GameObject.DestroyImmediate(item, true);
            }

            SObj.ApplyModifiedPropertiesWithoutUndo();
        }

        EditorUtility.SetDirty(obj);
        AssetDatabase.SaveAssets();
    }

    void CreateModuleCodeByDom(string Path)
    {
        string ScriptPath = string.Format("{0}/{1}{2}.cs", Path, CurrentModule, "Module");
        if (!File.Exists(ScriptPath))
        {
            CreateCodeHelper createCodeHelper = new CreateCodeHelper();
            createCodeHelper.AddUsing("Platform");
            createCodeHelper.SetNameSpace(isHotfix ? HotfixSpace : NameSpace);

            createCodeHelper.SetClassName(CurrentModule + "Module");
            createCodeHelper.AddClassCommentStatement(mvcComment);
            createCodeHelper.AddBaseType("ModuleBase");

            createCodeHelper.AddMethodInofs(new MethodInfo() { MethodName = "OnInit", MethodAtt = MemberAttributes.Family | MemberAttributes.Override });
            createCodeHelper.Create(ScriptPath);

            Debug.Log("Success Create Module Code");

        }
    }

}
